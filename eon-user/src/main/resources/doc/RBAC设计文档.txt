太好了～按你的补充我给出**MySQL + Java（Spring Boot）后端**的一整套可落地 RBAC（控到菜单和 API）方案：包含建表 SQL、项目结构、核心代码（登录 / JWT / 权限聚合缓存 / API 鉴权过滤器 / 菜单返回等）。你可以直接把这些给 Codex 开工。

---

# 一、MySQL 建表脚本（DDL）

> 多租户可选；不需要的话把 `tenant_id` 置空即可。时间用 `CURRENT_TIMESTAMP`，自增用 `BIGINT AUTO_INCREMENT`。
> **权限键统一规范**：
>
> * 菜单：`menu:<模块>.<页面>[.<按钮>]`（例：`menu:system.users`）
> * API：`api:<METHOD>:<path_template>`（例：`api:GET:/users/:id`、`api:*:/orders/**`）

```sql
-- 可选：租户
CREATE TABLE tenants (
  id           BIGINT PRIMARY KEY AUTO_INCREMENT,
  code         VARCHAR(128) NOT NULL UNIQUE,
  name         VARCHAR(255) NOT NULL,
  created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- 用户
CREATE TABLE users (
  id              BIGINT PRIMARY KEY AUTO_INCREMENT,
  tenant_id       BIGINT NULL,
  username        VARCHAR(128) NOT NULL,
  email           VARCHAR(255),
  password_hash   VARCHAR(255) NOT NULL,
  is_active       TINYINT(1) DEFAULT 1,
  policy_version  INT DEFAULT 1,   -- 权限变更版本（用于缓存刷新）
  created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_user_tenant_username (tenant_id, username),
  CONSTRAINT fk_users_tenant FOREIGN KEY (tenant_id) REFERENCES tenants(id)
) ENGINE=InnoDB;

-- 角色
CREATE TABLE roles (
  id           BIGINT PRIMARY KEY AUTO_INCREMENT,
  tenant_id    BIGINT NULL,
  code         VARCHAR(128) NOT NULL,
  name         VARCHAR(255) NOT NULL,
  is_system    TINYINT(1) DEFAULT 0,
  created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_role_tenant_code (tenant_id, code),
  CONSTRAINT fk_roles_tenant FOREIGN KEY (tenant_id) REFERENCES tenants(id)
) ENGINE=InnoDB;

-- 用户-角色
CREATE TABLE user_roles (
  user_id BIGINT NOT NULL,
  role_id BIGINT NOT NULL,
  PRIMARY KEY (user_id, role_id),
  CONSTRAINT fk_ur_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_ur_role FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 菜单（树）
CREATE TABLE menus (
  id             BIGINT PRIMARY KEY AUTO_INCREMENT,
  tenant_id      BIGINT NULL,
  parent_id      BIGINT NULL,
  title          VARCHAR(255) NOT NULL,
  route_path     VARCHAR(255) NOT NULL,
  component      VARCHAR(255),
  icon           VARCHAR(128),
  sort_weight    INT DEFAULT 100,
  visible        TINYINT(1) DEFAULT 1,
  permission_key VARCHAR(255) NOT NULL,        -- 例：menu:system.users
  meta_json      JSON,
  created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_menu_perm (tenant_id, permission_key),
  KEY idx_menus_parent (parent_id),
  CONSTRAINT fk_menus_tenant FOREIGN KEY (tenant_id) REFERENCES tenants(id),
  CONSTRAINT fk_menus_parent FOREIGN KEY (parent_id) REFERENCES menus(id)
) ENGINE=InnoDB;

-- API 资源
CREATE TABLE apis (
  id             BIGINT PRIMARY KEY AUTO_INCREMENT,
  tenant_id      BIGINT NULL,
  name           VARCHAR(255) NOT NULL,
  method         VARCHAR(16) NOT NULL,         -- GET/POST/PUT/DELETE/*
  path_template  VARCHAR(255) NOT NULL,        -- /users/:id, /orders/**
  path_regex     VARCHAR(512) NOT NULL,        -- 预编译正则，如 ^/users/[^/]+$
  is_public      TINYINT(1) DEFAULT 0,
  permission_key VARCHAR(255) NOT NULL,        -- 例：api:GET:/users/:id
  description    VARCHAR(512),
  created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_api_perm (tenant_id, permission_key),
  KEY idx_apis_match (method, path_regex),
  CONSTRAINT fk_apis_tenant FOREIGN KEY (tenant_id) REFERENCES tenants(id)
) ENGINE=InnoDB;

-- 权限定义（与资源解耦，用 resource_key 指向 menus.permission_key 或 apis.permission_key）
CREATE TABLE permissions (
  id             BIGINT PRIMARY KEY AUTO_INCREMENT,
  tenant_id      BIGINT NULL,
  resource_key   VARCHAR(255) NOT NULL,        -- menu:* 或 api:*
  action         VARCHAR(64)  NOT NULL,        -- 菜单= view；API= invoke / create / read / update / delete
  effect         ENUM('ALLOW','DENY') NOT NULL DEFAULT 'ALLOW',
  condition_json JSON NULL,                    -- ABAC 扩展（可为空）
  created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_perm (tenant_id, resource_key, action, effect),
  CONSTRAINT fk_perms_tenant FOREIGN KEY (tenant_id) REFERENCES tenants(id)
) ENGINE=InnoDB;

-- 角色-权限
CREATE TABLE role_permissions (
  role_id       BIGINT NOT NULL,
  permission_id BIGINT NOT NULL,
  PRIMARY KEY (role_id, permission_id),
  CONSTRAINT fk_rp_role       FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,
  CONSTRAINT fk_rp_permission FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 审计（可选）
CREATE TABLE audit_logs (
  id          BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id     BIGINT,
  action      VARCHAR(64) NOT NULL,
  detail_json JSON,
  created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  KEY idx_audit_user (user_id)
) ENGINE=InnoDB;

-- 示例数据
INSERT INTO roles (tenant_id, code, name, is_system) VALUES (NULL, 'admin', '系统管理员', 1);
INSERT INTO users (tenant_id, username, email, password_hash)
VALUES (NULL, 'admin', 'admin@example.com', '$2a$10$Q8cSx2k3n1y2XhM6X0mO0.1bE3Yw8cP6o2p5n3k5yQx1Z0Vg9qUe2'); -- 明文 admin123（BCrypt）

INSERT INTO user_roles (user_id, role_id)
SELECT u.id, r.id FROM users u, roles r WHERE u.username='admin' AND r.code='admin';
```

> **注意**：`path_regex` 由服务端在创建/更新 API 资源时自动编译（`/users/:id` → `^/users/[^/]+$`，`**` → `.*`）。

---

# 二、后端项目骨架（Spring Boot 3 / Java 17）

```
rbac/
├─ pom.xml
├─ src/main/java/com/example/rbac/
│  ├─ RbacApplication.java
│  ├─ config/
│  │  ├─ WebConfig.java
│  │  └─ JwtProperties.java
│  ├─ security/
│  │  ├─ JwtUtil.java
│  │  ├─ AuthFilter.java
│  │  └─ AuthorizationFilter.java
│  ├─ model/
│  │  ├─ entity/...(JPA 实体)
│  │  ├─ dto/...(Login/Menu DTO)
│  │  └─ policy/CompiledPolicy.java
│  ├─ repository/...(JPA Repos)
│  ├─ service/
│  │  ├─ AuthService.java
│  │  ├─ PolicyService.java
│  │  ├─ ApiService.java
│  │  └─ MenuService.java
│  ├─ util/PathPatternCompiler.java
│  └─ controller/
│     ├─ AuthController.java
│     └─ MeController.java
└─ src/main/resources/
   ├─ application.yml
   └─ schema.sql (可选：自动建表/初始化)
```

## 1) `pom.xml`

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" ...>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>rbac</artifactId>
  <version>1.0.0</version>
  <properties>
    <java.version>17</java.version>
    <spring-boot.version>3.3.2</spring-boot.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Web + JPA -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- JWT -->
    <dependency>
      <groupId>com.auth0</groupId>
      <artifactId>java-jwt</artifactId>
      <version>4.4.0</version>
    </dependency>

    <!-- BCrypt -->
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-crypto</artifactId>
    </dependency>

    <!-- 可选：内存缓存 Caffeine -->
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>3.1.8</version>
    </dependency>

    <!-- Lombok（便于简化实体/DTO） -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>
```

## 2) `application.yml`

```yaml
server:
  port: 8080

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/rbac?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: none   # 生产建议 none；开发可设 update
    properties:
      hibernate:
        format_sql: true
    open-in-view: false

jwt:
  issuer: "rbac.example"
  secret: "change-me-to-a-long-random-secret"
  ttlSeconds: 86400
```

## 3) 启动类

```java
// RbacApplication.java
package com.example.rbac;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RbacApplication {
  public static void main(String[] args) {
    SpringApplication.run(RbacApplication.class, args);
  }
}
```

## 4) 配置与过滤器注册

```java
// config/WebConfig.java
package com.example.rbac.config;

import com.example.rbac.security.AuthFilter;
import com.example.rbac.security.AuthorizationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@RequiredArgsConstructor
public class WebConfig {

  private final AuthFilter authFilter;
  private final AuthorizationFilter authorizationFilter;

  @Bean
  public FilterRegistrationBean<AuthFilter> authFilterRegistration() {
    FilterRegistrationBean<AuthFilter> bean = new FilterRegistrationBean<>();
    bean.setFilter(authFilter);
    bean.addUrlPatterns("/*");
    bean.setOrder(1);
    return bean;
  }

  @Bean
  public FilterRegistrationBean<AuthorizationFilter> authorizationFilterRegistration() {
    FilterRegistrationBean<AuthorizationFilter> bean = new FilterRegistrationBean<>();
    bean.setFilter(authorizationFilter);
    bean.addUrlPatterns("/*");
    bean.setOrder(2);
    return bean;
  }
}
```

```java
// config/JwtProperties.java
package com.example.rbac.config;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Data
@Component
@ConfigurationProperties(prefix = "jwt")
public class JwtProperties {
  private String issuer;
  private String secret;
  private long ttlSeconds;
}
```

## 5) 工具：路径模板编译

```java
// util/PathPatternCompiler.java
package com.example.rbac.util;

public class PathPatternCompiler {

  /**
   * /users/:id      -> ^/users/[^/]+$
   * /orders/**      -> ^/orders/.*$
   * /files/:path**  -> ^/files/.+$
   */
  public static String toRegex(String template) {
    String esc = template
        .replaceAll("\\.", "\\\\.")
        .replaceAll("\\?", "\\\\?")
        .replaceAll("\\+", "\\\\+");
    // :param -> [^/]+
    esc = esc.replaceAll("(:[a-zA-Z_][a-zA-Z0-9_]*)", "[^/]+");
    // ** -> .*
    esc = esc.replace("/**", "/.*");
    // 剩余 * 不推荐在模板中使用，若有可按需处理
    if (!esc.startsWith("^")) esc = "^" + esc;
    if (!esc.endsWith("$")) esc = esc + "$";
    return esc;
  }
}
```

## 6) 模型（只列关键表，其他同理）

```java
// model/entity/User.java
package com.example.rbac.model.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.Instant;

@Entity @Table(name = "users",
  uniqueConstraints = @UniqueConstraint(name="uq_user_tenant_username", columnNames={"tenant_id","username"})
)
@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class User {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private Long tenantId;
  private String username;
  private String email;
  private String passwordHash;
  private Boolean isActive;
  private Integer policyVersion;

  private Instant createdAt;
  private Instant updatedAt;
}
```

```java
// model/entity/Role.java
package com.example.rbac.model.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity @Table(name = "roles",
  uniqueConstraints = @UniqueConstraint(name="uq_role_tenant_code", columnNames={"tenant_id","code"})
)
@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class Role {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private Long tenantId;
  private String code;
  private String name;
  private Boolean isSystem;
}
```

```java
// model/entity/Menu.java
package com.example.rbac.model.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity @Table(name = "menus")
@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class Menu {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private Long tenantId;
  private Long parentId;
  private String title;
  private String routePath;
  private String component;
  private String icon;
  private Integer sortWeight;
  private Boolean visible;
  private String permissionKey;
  @Column(columnDefinition = "json")
  private String metaJson;
}
```

```java
// model/entity/ApiResource.java
package com.example.rbac.model.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity @Table(name = "apis")
@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class ApiResource {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private Long tenantId;
  private String name;
  private String method;        // GET/POST/* ...
  private String pathTemplate;
  private String pathRegex;
  private Boolean isPublic;
  private String permissionKey;
  private String description;
}
```

```java
// model/entity/Permission.java
package com.example.rbac.model.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity @Table(name = "permissions",
  uniqueConstraints = @UniqueConstraint(name="uq_perm", columnNames={"tenant_id","resource_key","action","effect"})
)
@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class Permission {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private Long tenantId;
  private String resourceKey;   // menu:* 或 api:*
  private String action;        // view / invoke / crud...
  @Enumerated(EnumType.STRING)
  private Effect effect;
  @Column(columnDefinition = "json")
  private String conditionJson;

  public enum Effect { ALLOW, DENY }
}
```

```java
// model/entity/RolePermission.java
package com.example.rbac.model.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity @Table(name = "role_permissions")
@Data @NoArgsConstructor @AllArgsConstructor @Builder
@IdClass(RolePermissionKey.class)
public class RolePermission {
  @Id private Long roleId;
  @Id private Long permissionId;
}
```

```java
// model/entity/RolePermissionKey.java
package com.example.rbac.model.entity;

import lombok.*;

import java.io.Serializable;

@Data @NoArgsConstructor @AllArgsConstructor
public class RolePermissionKey implements Serializable {
  private Long roleId;
  private Long permissionId;
}
```

```java
// model/entity/UserRole.java
package com.example.rbac.model.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity @Table(name = "user_roles")
@Data @NoArgsConstructor @AllArgsConstructor @Builder
@IdClass(UserRoleKey.class)
public class UserRole {
  @Id private Long userId;
  @Id private Long roleId;
}
```

```java
// model/entity/UserRoleKey.java
package com.example.rbac.model.entity;

import lombok.*;

import java.io.Serializable;

@Data @NoArgsConstructor @AllArgsConstructor
public class UserRoleKey implements Serializable {
  private Long userId;
  private Long roleId;
}
```

## 7) 仓库（示例）

```java
// repository/UserRepository.java
package com.example.rbac.repository;

import com.example.rbac.model.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
  Optional<User> findByUsernameAndTenantId(String username, Long tenantId);
  Optional<User> findByUsername(String username);
}
```

```java
// repository/RoleRepository.java
package com.example.rbac.repository;

import com.example.rbac.model.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RoleRepository extends JpaRepository<Role, Long> {}
```

```java
// repository/MenuRepository.java
package com.example.rbac.repository;

import com.example.rbac.model.entity.Menu;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface MenuRepository extends JpaRepository<Menu, Long> {
  List<Menu> findByTenantIdOrTenantIdIsNull(Long tenantId);
}
```

```java
// repository/ApiResourceRepository.java
package com.example.rbac.repository;

import com.example.rbac.model.entity.ApiResource;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface ApiResourceRepository extends JpaRepository<ApiResource, Long> {
  List<ApiResource> findByTenantIdOrTenantIdIsNull(Long tenantId);
}
```

```java
// repository/PermissionRepository.java
package com.example.rbac.repository;

import com.example.rbac.model.entity.Permission;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PermissionRepository extends JpaRepository<Permission, Long> {}
```

```java
// repository/UserRoleRepository.java
package com.example.rbac.repository;

import com.example.rbac.model.entity.UserRole;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface UserRoleRepository extends JpaRepository<UserRole, Long> {
  List<UserRole> findByUserId(Long userId);
}
```

```java
// repository/RolePermissionRepository.java
package com.example.rbac.repository;

import com.example.rbac.model.entity.RolePermission;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface RolePermissionRepository extends JpaRepository<RolePermission, Long> {
  List<RolePermission> findByRoleIdIn(Iterable<Long> roleIds);
}
```

## 8) 编译后的策略（缓存结构）

```java
// model/policy/CompiledPolicy.java
package com.example.rbac.model.policy;

import lombok.*;

import java.util.*;
import java.util.regex.Pattern;

@Data @Builder @NoArgsConstructor @AllArgsConstructor
public class CompiledPolicy {
  private Long userId;
  private Integer policyVersion;
  // 菜单权限：permission_key -> ALLOW/DENY
  private Map<String, String> menuEffects;
  // API 规则
  @Singular private List<ApiRule> apiRules;

  @Data @Builder @NoArgsConstructor @AllArgsConstructor
  public static class ApiRule {
    private String key;              // api:GET:/users/:id
    private String method;           // GET/* ...
    private Pattern regex;           // 已编译
    private String effect;           // ALLOW/DENY
  }
}
```

## 9) JWT 工具与认证过滤器

```java
// security/JwtUtil.java
package com.example.rbac.security;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.example.rbac.config.JwtProperties;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
@RequiredArgsConstructor
public class JwtUtil {
  private final JwtProperties props;

  public String issueToken(Long userId, Integer policyVersion) {
    long now = System.currentTimeMillis();
    Algorithm alg = Algorithm.HMAC256(props.getSecret());
    return JWT.create()
        .withIssuer(props.getIssuer())
        .withIssuedAt(new Date(now))
        .withExpiresAt(new Date(now + props.getTtlSeconds() * 1000))
        .withClaim("uid", userId)
        .withClaim("pv", policyVersion)
        .sign(alg);
  }

  public DecodedJWT verify(String token) {
    return JWT.require(Algorithm.HMAC256(props.getSecret()))
        .withIssuer(props.getIssuer())
        .build()
        .verify(token);
  }
}
```

```java
// security/AuthFilter.java
package com.example.rbac.security;

import com.auth0.jwt.interfaces.DecodedJWT;
import jakarta.servlet.*;
import jakarta.servlet.http.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class AuthFilter implements Filter {

  private final JwtUtil jwtUtil;

  @Override
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
      throws IOException, ServletException {
    HttpServletRequest req = (HttpServletRequest) request;
    HttpServletResponse resp = (HttpServletResponse) response;

    // 登录与公共接口放行
    String path = req.getRequestURI();
    if (path.startsWith("/auth/login") || path.equals("/_health")) {
      chain.doFilter(request, response);
      return;
    }

    String auth = req.getHeader("Authorization");
    if (auth == null || !auth.startsWith("Bearer ")) {
      resp.setStatus(401);
      resp.setContentType("application/json;charset=UTF-8");
      resp.getWriter().write("{\"message\":\"Unauthenticated\"}");
      return;
    }

    try {
      DecodedJWT jwt = jwtUtil.verify(auth.substring(7));
      // 简化：把 uid/pv 放到请求属性，供后续使用
      req.setAttribute("uid", jwt.getClaim("uid").asLong());
      req.setAttribute("pv", jwt.getClaim("pv").asInt());
      chain.doFilter(request, response);
    } catch (Exception e) {
      resp.setStatus(401);
      resp.setContentType("application/json;charset=UTF-8");
      resp.getWriter().write("{\"message\":\"Invalid token\"}");
    }
  }
}
```

## 10) 策略聚合与缓存 + 鉴权过滤器

```java
// service/PolicyService.java
package com.example.rbac.service;

import com.example.rbac.model.entity.*;
import com.example.rbac.model.policy.CompiledPolicy;
import com.example.rbac.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class PolicyService {

  private final UserRepository userRepo;
  private final UserRoleRepository userRoleRepo;
  private final RolePermissionRepository rolePermRepo;
  private final PermissionRepository permRepo;
  private final ApiResourceRepository apiRepo;

  // 简化：本地内存缓存（可替换为 Caffeine/Redis）
  private final Map<Long, CompiledPolicy> cache = new HashMap<>();

  public CompiledPolicy getPolicy(Long userId, int tokenPv) {
    CompiledPolicy p = cache.get(userId);
    Integer dbPv = userRepo.findById(userId).map(User::getPolicyVersion).orElse(0);
    boolean needRebuild = (p == null) || !Objects.equals(p.getPolicyVersion(), dbPv) || tokenPv != dbPv;
    if (needRebuild) {
      p = rebuild(userId);
      cache.put(userId, p);
    }
    return p;
  }

  private CompiledPolicy rebuild(Long userId) {
    User u = userRepo.findById(userId).orElseThrow();
    List<Long> roleIds = userRoleRepo.findByUserId(userId).stream().map(UserRole::getRoleId).toList();

    // 角色拥有的 permissionId
    List<Long> permIds = rolePermRepo.findByRoleIdIn(roleIds).stream()
        .map(RolePermission::getPermissionId).toList();

    Map<String, String> menuEffects = new HashMap<>();
    List<CompiledPolicy.ApiRule> apiRules = new ArrayList<>();

    Map<Long, Permission> permMap = permRepo.findAllById(permIds).stream()
        .collect(Collectors.toMap(Permission::getId, x -> x));

    // 预取所有 API 资源（含公共）
    List<ApiResource> apis = apiRepo.findByTenantIdOrTenantIdIsNull(u.getTenantId());

    for (Permission p : permMap.values()) {
      String key = p.getResourceKey();
      String effect = p.getEffect().name();

      if (key.startsWith("menu:")) {
        // DENY 优先：若已有 ALLOW，再写 DENY 会覆盖
        menuEffects.put(key, effect);
      } else if (key.startsWith("api:")) {
        // 从权限键解析 method + template（也可通过 apis 表再反查更稳妥）
        String[] parts = key.split(":", 3); // api, METHOD, /path
        String method = parts.length > 1 ? parts[1] : "*";
        String pathTemplate = parts.length > 2 ? parts[2] : "/**";

        // 匹配表里的编译正则（同 path_template 的）
        String regex = apis.stream()
            .filter(a -> a.getPermissionKey().equals(key))
            .map(ApiResource::getPathRegex)
            .findFirst()
            .orElseGet(() -> com.example.rbac.util.PathPatternCompiler.toRegex(pathTemplate));

        apiRules.add(CompiledPolicy.ApiRule.builder()
            .key(key)
            .method(method.toUpperCase())
            .regex(Pattern.compile(regex))
            .effect(effect)
            .build());
      }
    }

    return CompiledPolicy.builder()
        .userId(userId)
        .policyVersion(u.getPolicyVersion())
        .menuEffects(menuEffects)
        .apiRules(apiRules)
        .build();
  }
}
```

```java
// security/AuthorizationFilter.java
package com.example.rbac.security;

import com.example.rbac.model.policy.CompiledPolicy;
import com.example.rbac.service.PolicyService;
import jakarta.servlet.*;
import jakarta.servlet.http.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class AuthorizationFilter implements Filter {

  private final PolicyService policyService;

  @Override
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
      throws IOException, ServletException {
    HttpServletRequest req = (HttpServletRequest) request;
    HttpServletResponse resp = (HttpServletResponse) response;

    // 公共接口（不鉴权）
    String path = req.getRequestURI();
    if (path.equals("/_health") || path.startsWith("/auth/login")) {
      chain.doFilter(request, response);
      return;
    }

    Long uid = (Long) req.getAttribute("uid");
    Integer pv = (Integer) req.getAttribute("pv");
    if (uid == null) {
      resp.setStatus(401);
      resp.setContentType("application/json;charset=UTF-8");
      resp.getWriter().write("{\"message\":\"Unauthenticated\"}");
      return;
    }

    CompiledPolicy policy = policyService.getPolicy(uid, pv);
    String method = req.getMethod().toUpperCase();

    // 评估匹配规则：DENY 优先，ALLOW 放行
    String decision = "NONE";
    for (CompiledPolicy.ApiRule rule : policy.getApiRules()) {
      if (!rule.getMethod().equals("*") && !rule.getMethod().equals(method)) continue;
      if (rule.getRegex().matcher(path).matches()) {
        if ("DENY".equals(rule.getEffect())) { decision = "DENY"; break; }
        if ("ALLOW".equals(rule.getEffect()) && decision.equals("NONE")) { decision = "ALLOW"; }
      }
    }

    if ("ALLOW".equals(decision)) {
      chain.doFilter(request, response);
    } else if ("DENY".equals(decision)) {
      resp.setStatus(403);
      resp.setContentType("application/json;charset=UTF-8");
      resp.getWriter().write("{\"message\":\"Forbidden\"}");
    } else {
      // 未命中任何策略：默认拒绝
      resp.setStatus(403);
      resp.setContentType("application/json;charset=UTF-8");
      resp.getWriter().write("{\"message\":\"No permission\"}");
    }
  }
}
```

## 11) 登录与“我的菜单”接口

```java
// model/dto/LoginDtos.java
package com.example.rbac.model.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.*;

@Data
public class LoginRequest {
  private Long tenantId;                    // 可选
  @NotBlank private String username;
  @NotBlank private String password;
}

@Data @AllArgsConstructor
public class LoginResponse {
  private String token;
}
```

```java
// service/AuthService.java
package com.example.rbac.service;

import com.example.rbac.model.dto.LoginRequest;
import com.example.rbac.model.dto.LoginResponse;
import com.example.rbac.model.entity.User;
import com.example.rbac.repository.UserRepository;
import com.example.rbac.security.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

  private final UserRepository userRepo;
  private final JwtUtil jwtUtil;
  private final BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

  public LoginResponse login(LoginRequest req) {
    User u = (req.getTenantId() == null)
        ? userRepo.findByUsername(req.getUsername()).orElseThrow(() -> new RuntimeException("User not found"))
        : userRepo.findByUsernameAndTenantId(req.getUsername(), req.getTenantId()).orElseThrow(() -> new RuntimeException("User not found"));

    if (!Boolean.TRUE.equals(u.getIsActive())) {
      throw new RuntimeException("User disabled");
    }
    if (!encoder.matches(req.getPassword(), u.getPasswordHash())) {
      throw new RuntimeException("Invalid credentials");
    }
    String token = jwtUtil.issueToken(u.getId(), u.getPolicyVersion());
    return new LoginResponse(token);
  }
}
```

```java
// controller/AuthController.java
package com.example.rbac.controller;

import com.example.rbac.model.dto.LoginRequest;
import com.example.rbac.model.dto.LoginResponse;
import com.example.rbac.service.AuthService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
public class AuthController {

  private final AuthService authService;

  @PostMapping("/login")
  public LoginResponse login(@RequestBody @Valid LoginRequest req) {
    return authService.login(req);
  }
}
```

```java
// service/MenuService.java
package com.example.rbac.service;

import com.example.rbac.model.entity.Menu;
import com.example.rbac.model.policy.CompiledPolicy;
import com.example.rbac.repository.MenuRepository;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class MenuService {

  private final MenuRepository menuRepo;

  @Data
  public static class MenuNode {
    private Long id;
    private Long parentId;
    private String title;
    private String routePath;
    private String icon;
    private Integer sortWeight;
    private String permissionKey;
    private List<MenuNode> children = new ArrayList<>();
  }

  public List<MenuNode> userMenus(Long userId, Long tenantId, CompiledPolicy policy) {
    List<Menu> all = menuRepo.findByTenantIdOrTenantIdIsNull(tenantId);
    // 过滤：visible && 有 view=ALLOW
    List<Menu> allowed = all.stream()
        .filter(m -> (m.getVisible() == null || m.getVisible())
            && "ALLOW".equals(policy.getMenuEffects().getOrDefault(m.getPermissionKey(), "DENY")))
        .sorted(Comparator.comparing(Menu::getSortWeight, Comparator.nullsLast(Integer::compareTo)))
        .toList();

    Map<Long, MenuNode> map = new HashMap<>();
    for (Menu m : allowed) {
      MenuNode n = new MenuNode();
      n.setId(m.getId());
      n.setParentId(m.getParentId());
      n.setTitle(m.getTitle());
      n.setRoutePath(m.getRoutePath());
      n.setIcon(m.getIcon());
      n.setSortWeight(m.getSortWeight());
      n.setPermissionKey(m.getPermissionKey());
      map.put(m.getId(), n);
    }
    // 组装树
    List<MenuNode> roots = new ArrayList<>();
    for (MenuNode n : map.values()) {
      if (n.getParentId() == null || !map.containsKey(n.getParentId())) {
        roots.add(n);
      } else {
        map.get(n.getParentId()).getChildren().add(n);
      }
    }
    // 子项排序
    roots.forEach(r -> sortRecursively(r));
    roots.sort(Comparator.comparing(MenuNode::getSortWeight, Comparator.nullsLast(Integer::compareTo)));
    return roots;
  }

  private void sortRecursively(MenuNode node) {
    node.getChildren().sort(Comparator.comparing(MenuNode::getSortWeight, Comparator.nullsLast(Integer::compareTo)));
    node.getChildren().forEach(this::sortRecursively);
  }
}
```

```java
// controller/MeController.java
package com.example.rbac.controller;

import com.example.rbac.model.policy.CompiledPolicy;
import com.example.rbac.service.MenuService;
import com.example.rbac.service.PolicyService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/auth/me")
@RequiredArgsConstructor
public class MeController {

  private final PolicyService policyService;
  private final MenuService menuService;

  @GetMapping("/menus")
  public List<MenuService.MenuNode> myMenus(HttpServletRequest req) {
    Long uid = (Long) req.getAttribute("uid");
    Integer pv = (Integer) req.getAttribute("pv");
    CompiledPolicy policy = policyService.getPolicy(uid, pv);
    // 这里简化：tenantId 未做严格区分，可扩展从用户取
    return menuService.userMenus(uid, null, policy);
  }
}
```

## 12) API 资源管理（创建/更新时编译正则）

```java
// service/ApiService.java
package com.example.rbac.service;

import com.example.rbac.model.entity.ApiResource;
import com.example.rbac.repository.ApiResourceRepository;
import com.example.rbac.util.PathPatternCompiler;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class ApiService {

  private final ApiResourceRepository apiRepo;

  @Transactional
  public ApiResource create(ApiResource api) {
    api.setPathRegex(PathPatternCompiler.toRegex(api.getPathTemplate()));
    // 统一 permission_key：api:<METHOD>:<path_template>
    api.setPermissionKey("api:" + api.getMethod().toUpperCase() + ":" + api.getPathTemplate());
    return apiRepo.save(api);
  }

  @Transactional
  public ApiResource update(Long id, ApiResource patch) {
    ApiResource a = apiRepo.findById(id).orElseThrow();
    if (patch.getMethod() != null) a.setMethod(patch.getMethod().toUpperCase());
    if (patch.getPathTemplate() != null) {
      a.setPathTemplate(patch.getPathTemplate());
      a.setPathRegex(PathPatternCompiler.toRegex(patch.getPathTemplate()));
    }
    if (patch.getName() != null) a.setName(patch.getName());
    if (patch.getDescription() != null) a.setDescription(patch.getDescription());
    if (patch.getIsPublic() != null) a.setIsPublic(patch.getIsPublic());
    a.setPermissionKey("api:" + a.getMethod().toUpperCase() + ":" + a.getPathTemplate());
    return apiRepo.save(a);
  }
}
```

---

# 三、典型用法 & 约定

1. **给角色授予菜单与 API 权限**

* 菜单：对 `menu:<...>` 写 `permissions(action='view', effect='ALLOW')`，再绑定到角色
* API：对 `api:<METHOD>:<path_template>` 写 `permissions(action='invoke', effect='ALLOW')`，再绑定到角色
* 如需拒绝：写 `effect='DENY'`，**DENY 优先**

2. **变更权限后刷新策略**

* 修改 `role_permissions` 或 `permissions` 后，把相关用户的 `users.policy_version = policy_version + 1`，客户端下次请求会触发策略重建。

3. **公共 API**

* 可在 `apis.is_public=1` 并在 `AuthorizationFilter` 里提前白名单（或给一个全局 ALLOW 规则）。上面的示例为简化，直接在过滤器最前面按路径放行；也可以把 `is_public` 合到编译策略中。

4. **ABAC 扩展**

* `permissions.condition_json` 预留（如 `{ "field":"departmentId", "op":"==", "valueFrom":"user.departmentId" }`），在 `AuthorizationFilter` 命中后做二次判断即可。

5. **健康检查**

* `GET /_health` 直接 200，用于部署探针。

---

# 四、少量种子数据（示例）

```sql
-- 菜单
INSERT INTO menus (permission_key, title, route_path, sort_weight) VALUES
('menu:system.users', '用户管理', '/system/users', 10),
('menu:system.roles', '角色管理', '/system/roles', 20);

-- 对应权限
INSERT INTO permissions (resource_key, action, effect) VALUES
('menu:system.users', 'view', 'ALLOW'),
('menu:system.roles', 'view', 'ALLOW');

-- API 资源（创建时服务会自动编译正则 & 生成 permission_key；以下手写示意）
INSERT INTO apis (name, method, path_template, path_regex, is_public, permission_key)
VALUES
('获取用户', 'GET', '/users/:id', '^/users/[^/]+$', 0, 'api:GET:/users/:id'),
('创建用户', 'POST', '/users', '^/users$', 0, 'api:POST:/users');

-- API 权限
INSERT INTO permissions (resource_key, action, effect) VALUES
('api:GET:/users/:id', 'invoke', 'ALLOW'),
('api:POST:/users', 'invoke', 'ALLOW');

-- 绑定到 admin 角色
INSERT INTO role_permissions (role_id, permission_id)
SELECT r.id, p.id FROM roles r, permissions p
WHERE r.code='admin' AND p.resource_key IN ('menu:system.users','menu:system.roles','api:GET:/users/:id','api:POST:/users');
```

---

# 五、你可以直接交给 Codex 的待办清单

* [ ] 按上面的 **MySQL DDL** 初始化数据库并导入示例数据
* [ ] 用提供的 **pom.yml / application.yml** 创建 Spring Boot 项目
* [ ] 粘贴 **实体/仓库/服务/过滤器/控制器** 代码
* [ ] 实现角色与权限管理的 CRUD（可在此基础上继续扩展）
* [ ] 在变更角色绑定后，**记得自增对应用户的 `policy_version`**
* [ ] 编写集成测试：

  * 未登录访问 → 401
  * 登录但无权限访问受控 API → 403
  * 授权后访问 → 200
  * 更新权限并自增 `policy_version` 后再次访问 → 200

---

